class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> mpp;
        int n=nums.size();

        for(int i=0;i<n;i++){
            int num=nums[i];
            int more=target-num;

            if(mpp.find(more) != mpp.end()){
                return {mpp[more] , i};
            }


            mpp[num]=i;
        }

        

        return {-1,-1};
    }
};








class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        int maxCount = (int)(n/2);
        int ans=0;
        int count=1;

        for(int i=1;i<n;i++){
            if(nums[i] == nums[ans]){
                count++;
            }

            else{
                count--;
            }

            if(count<0){
                ans=i;
                count=1;
            }


        }

        return nums[ans];
    }
};














